#cloud-config
autoinstall:
  version: 1
  # General configuration (replaces debconf settings)
  locale: en_US.UTF-8
  keyboard:
    layout: us
  
  # Network configuration (supporting static IP if variables are defined)
  network:
    network:
      version: 2
      ethernets:
        eth0:
          # The following will be replaced with actual values when template variables are processed
          dhcp4: false
          addresses:
            - ${network_ip}/${network_netmask_cidr}
          gateway4: ${network_gateway}
          nameservers:
            addresses: [${network_dns}]
      
  # Identity configuration
  identity:
    hostname: ${network_hostname}
    username: ${username}
    password: "${userpassword_crypted}"
    
  # User-data for additional users
  user-data:
    users:
      - name: root
        lock_passwd: false
        hashed_passwd: "${rootpassword_crypted}"
  
  # Storage configuration with direct nvme0n1 targeting for UEFI
  storage:
    config:
      - type: disk
        id: disk-nvme
        path: /dev/nvme0n1
        ptable: gpt
        wipe: superblock
        preserve: false
      - type: partition
        id: efi-partition
        device: disk-nvme
        size: 512MB
        flag: boot
        grub_device: true
        number: 1
        preserve: false
      - type: format
        id: efi-format
        volume: efi-partition
        fstype: fat32
        preserve: false
      - type: partition
        id: boot-partition
        device: disk-nvme
        size: 1GB
        number: 2
        preserve: false
      - type: format
        id: boot-format
        volume: boot-partition
        fstype: ext4
        preserve: false
      - type: partition
        id: root-partition
        device: disk-nvme
        size: -1
        number: 3
        preserve: false
      - type: format
        id: root-format 
        volume: root-partition
        fstype: ext4
        preserve: false
      - type: mount
        id: efi-mount
        device: efi-format
        path: /boot/efi
      - type: mount
        id: boot-mount
        device: boot-format
        path: /boot
      - type: mount
        id: root-mount
        device: root-format
        path: /
  
  # Package configuration
  packages:
    - snapd
    ${packages}
  
  # Updates and package handling
  updates: security
  apt:
    update: true
    upgrade: true
  
  # Early commands to verify nvme0n1 exists
  early-commands:
    - |
      #!/bin/bash
      # Verify nvme0n1 exists
      if [ ! -b /dev/nvme0n1 ]; then
        echo "ERROR: /dev/nvme0n1 does not exist"
        echo "This autoinstall is configured specifically for systems with NVMe drives."
        echo "Installation will be aborted."
        sleep 10
        exit 1
      fi
      
      echo "Target disk /dev/nvme0n1 found, proceeding with installation."
  
  # Late commands (equivalent to preseed/late_command)
  late-commands:
    # Ensure user and group exist
    - curtin in-target --target=/target -- bash -c "getent group ${username} || groupadd ${username}"
    
    # Clone repository (split into two commands)
    - curtin in-target --target=/target -- bash -c "git clone https://github.com/clearcmos/deb-preseed /home/${username}/deb-preseed" 
    - curtin in-target --target=/target -- bash -c "chown -R ${username}:${username} /home/${username}/deb-preseed"
    
    # Setup SSH for root
    - curtin in-target --target=/target -- bash -c "mkdir -p /root/.ssh && chmod 700 /root/.ssh"
    - curtin in-target --target=/target -- bash -c "touch /root/.ssh/authorized_keys && chmod 600 /root/.ssh/authorized_keys"
    - curtin in-target --target=/target -- bash -c "echo '${ssh_authorized_key_1}' >> /root/.ssh/authorized_keys"
    - curtin in-target --target=/target -- bash -c "echo '${ssh_authorized_key_2}' >> /root/.ssh/authorized_keys"
    - curtin in-target --target=/target -- bash -c "echo '${ssh_authorized_key_3}' >> /root/.ssh/authorized_keys"
    - curtin in-target --target=/target -- bash -c "echo '${ssh_authorized_key_4}' >> /root/.ssh/authorized_keys"
    
    # Setup SSH for user
    - curtin in-target --target=/target -- bash -c "mkdir -p /home/${username}/.ssh && chmod 700 /home/${username}/.ssh && chown ${username}:${username} /home/${username}/.ssh"
    - curtin in-target --target=/target -- bash -c "touch /home/${username}/.ssh/authorized_keys && chmod 600 /home/${username}/.ssh/authorized_keys && chown ${username}:${username} /home/${username}/.ssh/authorized_keys"
    - curtin in-target --target=/target -- bash -c "echo '${ssh_authorized_key_1}' >> /home/${username}/.ssh/authorized_keys"
    - curtin in-target --target=/target -- bash -c "echo '${ssh_authorized_key_2}' >> /home/${username}/.ssh/authorized_keys"
    - curtin in-target --target=/target -- bash -c "echo '${ssh_authorized_key_3}' >> /home/${username}/.ssh/authorized_keys"
    - curtin in-target --target=/target -- bash -c "echo '${ssh_authorized_key_4}' >> /home/${username}/.ssh/authorized_keys"
    - curtin in-target --target=/target -- bash -c "chown ${username}:${username} /home/${username}/.ssh/authorized_keys"
    
    # Generate SSH keys
    - curtin in-target --target=/target -- bash -c "ssh-keygen -t ed25519 -f /root/.ssh/id_ed25519 -N '' -C 'root@${network_hostname}'"
    - curtin in-target --target=/target -- bash -c "ssh-keygen -t ed25519 -f /home/${username}/.ssh/id_ed25519 -N '' -C '${username}@${network_hostname}' && chown ${username}:${username} /home/${username}/.ssh/id_ed25519 /home/${username}/.ssh/id_ed25519.pub"
    
    # Environment configuration
    - curtin in-target --target=/target -- bash -c "echo 'source /home/${username}/deb-preseed/common/env/aliases' >> /etc/profile"
    - curtin in-target --target=/target -- bash -c "echo 'source /home/${username}/deb-preseed/common/env/functions' >> /etc/profile"
    - curtin in-target --target=/target -- bash -c "echo 'source /home/${username}/deb-preseed/common/env/profile' >> /etc/profile"
    
    # User configuration
    - curtin in-target --target=/target -- bash -c "sed -i 's/^[[:space:]]*alias ls='\''ls --color=auto'\''/# alias ls='\''ls --color=auto'\''/g' /home/${username}/.bashrc"
    - curtin in-target --target=/target -- bash -c "sed -i 's/^# set autoindent/set autoindent/g' /etc/nanorc"
    
    # Docker and group setup
    - curtin in-target --target=/target -- bash -c "mkdir -p /home/${username}/deb-preseed/hosts/misc/docker-compose/traefik && touch /home/${username}/deb-preseed/hosts/misc/docker-compose/traefik/acme.json && chmod 600 /home/${username}/deb-preseed/hosts/misc/docker-compose/traefik/acme.json && chown ${username}:${username} /home/${username}/deb-preseed/hosts/misc/docker-compose/traefik/acme.json"
    - curtin in-target --target=/target -- bash -c "usermod -aG docker ${username}"
    - curtin in-target --target=/target -- bash -c "groupadd secrets || true"
    - curtin in-target --target=/target -- bash -c "usermod -aG secrets ${username}"
    
    # NPM setup
    - curtin in-target --target=/target -- bash -c "mkdir -p /usr/local/lib/shared-npm && chown -R ${username}:${username} /usr/local/lib/shared-npm"
    - curtin in-target --target=/target -- bash -c "echo 'export PATH=/usr/local/lib/shared-npm/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin' > /etc/profile.d/shared-npm.sh && chmod +x /etc/profile.d/shared-npm.sh"
    - curtin in-target --target=/target -- bash -c "su - ${username} -c 'npm config set prefix /usr/local/lib/shared-npm'"
    - curtin in-target --target=/target -- bash -c "su - ${username} -c 'echo export PATH=/usr/local/lib/shared-npm/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin >> /home/${username}/.profile'"
    - curtin in-target --target=/target -- bash -c "su - ${username} -c 'npm install -g @anthropic-ai/claude-code'"
    
    # Install applications via snap (after snapd is available)
    - curtin in-target --target=/target -- bash -c "systemctl enable snapd.socket"
    - curtin in-target --target=/target -- bash -c "snap wait system seed.loaded"
    - curtin in-target --target=/target -- bash -c "snap install 1password"
    - curtin in-target --target=/target -- bash -c "snap install brave"
    - curtin in-target --target=/target -- bash -c "snap install code --classic"
    - curtin in-target --target=/target -- bash -c "snap install discord"